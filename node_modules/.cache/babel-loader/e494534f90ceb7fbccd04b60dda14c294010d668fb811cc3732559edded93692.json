{"ast":null,"code":"/**\n * @module ol/TileQueue\n */\nimport TileState from './TileState.js';\nimport EventType from './events/EventType.js';\nimport PriorityQueue, { DROP } from './structs/PriorityQueue.js';\n\n/**\n * @typedef {function(import(\"./Tile.js\").default, string, import('./tilecoord.js').TileCoord, number): number} PriorityFunction\n */\n\n/**\n * @typedef {[import('./Tile.js').default, string, import('./tilecoord.js').TileCoord, number]} TileQueueElement\n */\n\n/**\n * @extends PriorityQueue<TileQueueElement>}\n */\nclass TileQueue extends PriorityQueue {\n  /**\n   * @param {PriorityFunction} tilePriorityFunction Tile priority function.\n   * @param {function(): ?} tileChangeCallback Function called on each tile change event.\n   */\n  constructor(tilePriorityFunction, tileChangeCallback) {\n    super(element => tilePriorityFunction.apply(null, element), element => element[0].getKey());\n\n    /** @private */\n    this.boundHandleTileChange_ = this.handleTileChange.bind(this);\n\n    /**\n     * @private\n     * @type {function(): ?}\n     */\n    this.tileChangeCallback_ = tileChangeCallback;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tilesLoading_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string,boolean>}\n     */\n    this.tilesLoadingKeys_ = {};\n  }\n\n  /**\n   * @param {TileQueueElement} element Element.\n   * @return {boolean} The element was added to the queue.\n   * @override\n   */\n  enqueue(element) {\n    const added = super.enqueue(element);\n    if (added) {\n      const tile = element[0];\n      tile.addEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n    }\n    return added;\n  }\n\n  /**\n   * @return {number} Number of tiles loading.\n   */\n  getTilesLoading() {\n    return this.tilesLoading_;\n  }\n\n  /**\n   * @param {import(\"./events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"./Tile.js\").default} */event.target;\n    const state = tile.getState();\n    if (state === TileState.LOADED || state === TileState.ERROR || state === TileState.EMPTY) {\n      if (state !== TileState.ERROR) {\n        tile.removeEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n      }\n      const tileKey = tile.getKey();\n      if (tileKey in this.tilesLoadingKeys_) {\n        delete this.tilesLoadingKeys_[tileKey];\n        --this.tilesLoading_;\n      }\n      this.tileChangeCallback_();\n    }\n  }\n\n  /**\n   * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.\n   * @param {number} maxNewLoads Maximum number of new tiles to load.\n   */\n  loadMoreTiles(maxTotalLoading, maxNewLoads) {\n    let newLoads = 0;\n    while (this.tilesLoading_ < maxTotalLoading && newLoads < maxNewLoads && this.getCount() > 0) {\n      const tile = this.dequeue()[0];\n      const tileKey = tile.getKey();\n      const state = tile.getState();\n      if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {\n        this.tilesLoadingKeys_[tileKey] = true;\n        ++this.tilesLoading_;\n        ++newLoads;\n        tile.load();\n      }\n    }\n  }\n}\nexport default TileQueue;\n\n/**\n * @param {import('./Map.js').FrameState} frameState Frame state.\n * @param {import(\"./Tile.js\").default} tile Tile.\n * @param {string} tileSourceKey Tile source key.\n * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n * @param {number} tileResolution Tile resolution.\n * @return {number} Tile priority.\n */\nexport function getTilePriority(frameState, tile, tileSourceKey, tileCenter, tileResolution) {\n  // Filter out tiles at higher zoom levels than the current zoom level, or that\n  // are outside the visible extent.\n  if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {\n    return DROP;\n  }\n  if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {\n    return DROP;\n  }\n  // Prioritize the highest zoom level tiles closest to the focus.\n  // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).\n  // Within a zoom level, tiles are prioritized by the distance in pixels between\n  // the center of the tile and the center of the viewport.  The factor of 65536\n  // means that the prioritization should behave as desired for tiles up to\n  // 65536 * Math.log(2) = 45426 pixels from the focus.\n  const center = frameState.viewState.center;\n  const deltaX = tileCenter[0] - center[0];\n  const deltaY = tileCenter[1] - center[1];\n  return 65536 * Math.log(tileResolution) + Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;\n}","map":{"version":3,"names":["TileState","EventType","PriorityQueue","DROP","TileQueue","constructor","tilePriorityFunction","tileChangeCallback","element","apply","getKey","boundHandleTileChange_","handleTileChange","bind","tileChangeCallback_","tilesLoading_","tilesLoadingKeys_","enqueue","added","tile","addEventListener","CHANGE","getTilesLoading","event","target","state","getState","LOADED","ERROR","EMPTY","removeEventListener","tileKey","loadMoreTiles","maxTotalLoading","maxNewLoads","newLoads","getCount","dequeue","IDLE","load","getTilePriority","frameState","tileSourceKey","tileCenter","tileResolution","wantedTiles","center","viewState","deltaX","deltaY","Math","log","sqrt"],"sources":["F:/Dev/Tutorial/React/Udemy/react-frontend-01-starting-setup/node_modules/ol/TileQueue.js"],"sourcesContent":["/**\n * @module ol/TileQueue\n */\nimport TileState from './TileState.js';\nimport EventType from './events/EventType.js';\nimport PriorityQueue, {DROP} from './structs/PriorityQueue.js';\n\n/**\n * @typedef {function(import(\"./Tile.js\").default, string, import('./tilecoord.js').TileCoord, number): number} PriorityFunction\n */\n\n/**\n * @typedef {[import('./Tile.js').default, string, import('./tilecoord.js').TileCoord, number]} TileQueueElement\n */\n\n/**\n * @extends PriorityQueue<TileQueueElement>}\n */\nclass TileQueue extends PriorityQueue {\n  /**\n   * @param {PriorityFunction} tilePriorityFunction Tile priority function.\n   * @param {function(): ?} tileChangeCallback Function called on each tile change event.\n   */\n  constructor(tilePriorityFunction, tileChangeCallback) {\n    super(\n      (element) => tilePriorityFunction.apply(null, element),\n      (element) => element[0].getKey(),\n    );\n\n    /** @private */\n    this.boundHandleTileChange_ = this.handleTileChange.bind(this);\n\n    /**\n     * @private\n     * @type {function(): ?}\n     */\n    this.tileChangeCallback_ = tileChangeCallback;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tilesLoading_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string,boolean>}\n     */\n    this.tilesLoadingKeys_ = {};\n  }\n\n  /**\n   * @param {TileQueueElement} element Element.\n   * @return {boolean} The element was added to the queue.\n   * @override\n   */\n  enqueue(element) {\n    const added = super.enqueue(element);\n    if (added) {\n      const tile = element[0];\n      tile.addEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n    }\n    return added;\n  }\n\n  /**\n   * @return {number} Number of tiles loading.\n   */\n  getTilesLoading() {\n    return this.tilesLoading_;\n  }\n\n  /**\n   * @param {import(\"./events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"./Tile.js\").default} */ (event.target);\n    const state = tile.getState();\n    if (\n      state === TileState.LOADED ||\n      state === TileState.ERROR ||\n      state === TileState.EMPTY\n    ) {\n      if (state !== TileState.ERROR) {\n        tile.removeEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n      }\n      const tileKey = tile.getKey();\n      if (tileKey in this.tilesLoadingKeys_) {\n        delete this.tilesLoadingKeys_[tileKey];\n        --this.tilesLoading_;\n      }\n      this.tileChangeCallback_();\n    }\n  }\n\n  /**\n   * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.\n   * @param {number} maxNewLoads Maximum number of new tiles to load.\n   */\n  loadMoreTiles(maxTotalLoading, maxNewLoads) {\n    let newLoads = 0;\n    while (\n      this.tilesLoading_ < maxTotalLoading &&\n      newLoads < maxNewLoads &&\n      this.getCount() > 0\n    ) {\n      const tile = this.dequeue()[0];\n      const tileKey = tile.getKey();\n      const state = tile.getState();\n      if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {\n        this.tilesLoadingKeys_[tileKey] = true;\n        ++this.tilesLoading_;\n        ++newLoads;\n        tile.load();\n      }\n    }\n  }\n}\n\nexport default TileQueue;\n\n/**\n * @param {import('./Map.js').FrameState} frameState Frame state.\n * @param {import(\"./Tile.js\").default} tile Tile.\n * @param {string} tileSourceKey Tile source key.\n * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n * @param {number} tileResolution Tile resolution.\n * @return {number} Tile priority.\n */\nexport function getTilePriority(\n  frameState,\n  tile,\n  tileSourceKey,\n  tileCenter,\n  tileResolution,\n) {\n  // Filter out tiles at higher zoom levels than the current zoom level, or that\n  // are outside the visible extent.\n  if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {\n    return DROP;\n  }\n  if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {\n    return DROP;\n  }\n  // Prioritize the highest zoom level tiles closest to the focus.\n  // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).\n  // Within a zoom level, tiles are prioritized by the distance in pixels between\n  // the center of the tile and the center of the viewport.  The factor of 65536\n  // means that the prioritization should behave as desired for tiles up to\n  // 65536 * Math.log(2) = 45426 pixels from the focus.\n  const center = frameState.viewState.center;\n  const deltaX = tileCenter[0] - center[0];\n  const deltaY = tileCenter[1] - center[1];\n  return (\n    65536 * Math.log(tileResolution) +\n    Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}