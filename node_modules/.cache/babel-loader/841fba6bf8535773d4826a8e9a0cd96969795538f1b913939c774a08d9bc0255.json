{"ast":null,"code":"/**\n * @module ol/reproj/Tile\n */\n\nimport Tile from '../Tile.js';\nimport TileState from '../TileState.js';\nimport { releaseCanvas } from '../dom.js';\nimport EventType from '../events/EventType.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { getArea, getIntersection, getWidth, wrapAndSliceX } from '../extent.js';\nimport { clamp } from '../math.js';\nimport { calculateSourceExtentResolution, canvasPool, render as renderReprojected } from '../reproj.js';\nimport Triangulation from './Triangulation.js';\nimport { ERROR_THRESHOLD } from './common.js';\n\n/**\n * @typedef {function(number, number, number, number) : (import(\"../ImageTile.js\").default)} FunctionType\n */\n\n/**\n * @typedef {Object} TileOffset\n * @property {import(\"../ImageTile.js\").default} tile Tile.\n * @property {number} offset Offset.\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected tile.\n * See {@link module:ol/source/TileImage~TileImage}.\n *\n */\nclass ReprojTile extends Tile {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} sourceTileGrid Source tile grid.\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} targetTileGrid Target tile grid.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Coordinate of the tile.\n   * @param {import(\"../tilecoord.js\").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} gutter Gutter of the source tiles.\n   * @param {FunctionType} getTileFunction\n   *     Function returning source tiles (z, x, y, pixelRatio).\n   * @param {number} [errorThreshold] Acceptable reprojection error (in px).\n   * @param {boolean} [renderEdges] Render reprojection edges.\n   * @param {import(\"../Tile.js\").Options} [options] Tile options.\n   */\n  constructor(sourceProj, sourceTileGrid, targetProj, targetTileGrid, tileCoord, wrappedTileCoord, pixelRatio, gutter, getTileFunction, errorThreshold, renderEdges, options) {\n    super(tileCoord, TileState.IDLE, options);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderEdges_ = renderEdges !== undefined ? renderEdges : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = gutter;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.sourceTileGrid_ = sourceTileGrid;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.targetTileGrid_ = targetTileGrid;\n\n    /**\n     * @private\n     * @type {import(\"../tilecoord.js\").TileCoord}\n     */\n    this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;\n\n    /**\n     * @private\n     * @type {!Array<TileOffset>}\n     */\n    this.sourceTiles_ = [];\n\n    /**\n     * @private\n     * @type {?Array<import(\"../events.js\").EventsKey>}\n     */\n    this.sourcesListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourceZ_ = 0;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.clipExtent_ = sourceProj.canWrapX() ? sourceProj.getExtent() : undefined;\n    const targetExtent = targetTileGrid.getTileCoordExtent(this.wrappedTileCoord_);\n    const maxTargetExtent = this.targetTileGrid_.getExtent();\n    let maxSourceExtent = this.sourceTileGrid_.getExtent();\n    const limitedTargetExtent = maxTargetExtent ? getIntersection(targetExtent, maxTargetExtent) : targetExtent;\n    if (getArea(limitedTargetExtent) === 0) {\n      // Tile is completely outside range -> EMPTY\n      // TODO: is it actually correct that the source even creates the tile ?\n      this.state = TileState.EMPTY;\n      return;\n    }\n    const sourceProjExtent = sourceProj.getExtent();\n    if (sourceProjExtent) {\n      if (!maxSourceExtent) {\n        maxSourceExtent = sourceProjExtent;\n      } else {\n        maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);\n      }\n    }\n    const targetResolution = targetTileGrid.getResolution(this.wrappedTileCoord_[0]);\n    const sourceResolution = calculateSourceExtentResolution(sourceProj, targetProj, limitedTargetExtent, targetResolution);\n    if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n      // invalid sourceResolution -> EMPTY\n      // probably edges of the projections when no extent is defined\n      this.state = TileState.EMPTY;\n      return;\n    }\n    const errorThresholdInPixels = errorThreshold !== undefined ? errorThreshold : ERROR_THRESHOLD;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = new Triangulation(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels, targetResolution);\n    if (this.triangulation_.getTriangles().length === 0) {\n      // no valid triangles -> EMPTY\n      this.state = TileState.EMPTY;\n      return;\n    }\n    this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);\n    let sourceExtent = this.triangulation_.calculateSourceExtent();\n    if (maxSourceExtent) {\n      if (sourceProj.canWrapX()) {\n        sourceExtent[1] = clamp(sourceExtent[1], maxSourceExtent[1], maxSourceExtent[3]);\n        sourceExtent[3] = clamp(sourceExtent[3], maxSourceExtent[1], maxSourceExtent[3]);\n      } else {\n        sourceExtent = getIntersection(sourceExtent, maxSourceExtent);\n      }\n    }\n    if (!getArea(sourceExtent)) {\n      this.state = TileState.EMPTY;\n    } else {\n      let worldWidth = 0;\n      let worldsAway = 0;\n      if (sourceProj.canWrapX()) {\n        worldWidth = getWidth(sourceProjExtent);\n        worldsAway = Math.floor((sourceExtent[0] - sourceProjExtent[0]) / worldWidth);\n      }\n      const sourceExtents = wrapAndSliceX(sourceExtent.slice(), sourceProj, true);\n      sourceExtents.forEach(extent => {\n        const sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(extent, this.sourceZ_);\n        for (let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {\n          for (let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {\n            const tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);\n            if (tile) {\n              const offset = worldsAway * worldWidth;\n              this.sourceTiles_.push({\n                tile,\n                offset\n              });\n            }\n          }\n        }\n        ++worldsAway;\n      });\n      if (this.sourceTiles_.length === 0) {\n        this.state = TileState.EMPTY;\n      }\n    }\n  }\n\n  /**\n   * Get the HTML Canvas element for this tile.\n   * @return {HTMLCanvasElement} Canvas.\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sources = [];\n    this.sourceTiles_.forEach(source => {\n      const tile = source.tile;\n      if (tile && tile.getState() == TileState.LOADED) {\n        const extent = this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord);\n        extent[0] += source.offset;\n        extent[2] += source.offset;\n        const clipExtent = this.clipExtent_?.slice();\n        if (clipExtent) {\n          clipExtent[0] += source.offset;\n          clipExtent[2] += source.offset;\n        }\n        sources.push({\n          extent: extent,\n          clipExtent: clipExtent,\n          image: tile.getImage()\n        });\n      }\n    });\n    this.sourceTiles_.length = 0;\n    if (sources.length === 0) {\n      this.state = TileState.ERROR;\n    } else {\n      const z = this.wrappedTileCoord_[0];\n      const size = this.targetTileGrid_.getTileSize(z);\n      const width = typeof size === 'number' ? size : size[0];\n      const height = typeof size === 'number' ? size : size[1];\n      const targetResolution = this.targetTileGrid_.getResolution(z);\n      const sourceResolution = this.sourceTileGrid_.getResolution(this.sourceZ_);\n      const targetExtent = this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);\n      this.canvas_ = renderReprojected(width, height, this.pixelRatio_, sourceResolution, this.sourceTileGrid_.getExtent(), targetResolution, targetExtent, this.triangulation_, sources, this.gutter_, this.renderEdges_, this.interpolate);\n      this.state = TileState.LOADED;\n    }\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @override\n   */\n  load() {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      this.changed();\n      let leftToLoad = 0;\n      this.sourcesListenerKeys_ = [];\n      this.sourceTiles_.forEach(({\n        tile\n      }) => {\n        const state = tile.getState();\n        if (state == TileState.IDLE || state == TileState.LOADING) {\n          leftToLoad++;\n          const sourceListenKey = listen(tile, EventType.CHANGE, e => {\n            const state = tile.getState();\n            if (state == TileState.LOADED || state == TileState.ERROR || state == TileState.EMPTY) {\n              unlistenByKey(sourceListenKey);\n              leftToLoad--;\n              if (leftToLoad === 0) {\n                this.unlistenSources_();\n                this.reproject_();\n              }\n            }\n          });\n          this.sourcesListenerKeys_.push(sourceListenKey);\n        }\n      });\n      if (leftToLoad === 0) {\n        setTimeout(this.reproject_.bind(this), 0);\n      } else {\n        this.sourceTiles_.forEach(function ({\n          tile\n        }, i, arr) {\n          const state = tile.getState();\n          if (state == TileState.IDLE) {\n            tile.load();\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSources_() {\n    this.sourcesListenerKeys_.forEach(unlistenByKey);\n    this.sourcesListenerKeys_ = null;\n  }\n\n  /**\n   * Remove from the cache due to expiry\n   * @override\n   */\n  release() {\n    if (this.canvas_) {\n      releaseCanvas(this.canvas_.getContext('2d'));\n      canvasPool.push(this.canvas_);\n      this.canvas_ = null;\n    }\n    super.release();\n  }\n}\nexport default ReprojTile;","map":{"version":3,"names":["Tile","TileState","releaseCanvas","EventType","listen","unlistenByKey","getArea","getIntersection","getWidth","wrapAndSliceX","clamp","calculateSourceExtentResolution","canvasPool","render","renderReprojected","Triangulation","ERROR_THRESHOLD","ReprojTile","constructor","sourceProj","sourceTileGrid","targetProj","targetTileGrid","tileCoord","wrappedTileCoord","pixelRatio","gutter","getTileFunction","errorThreshold","renderEdges","options","IDLE","renderEdges_","undefined","pixelRatio_","gutter_","canvas_","sourceTileGrid_","targetTileGrid_","wrappedTileCoord_","sourceTiles_","sourcesListenerKeys_","sourceZ_","clipExtent_","canWrapX","getExtent","targetExtent","getTileCoordExtent","maxTargetExtent","maxSourceExtent","limitedTargetExtent","state","EMPTY","sourceProjExtent","targetResolution","getResolution","sourceResolution","isFinite","errorThresholdInPixels","triangulation_","getTriangles","length","getZForResolution","sourceExtent","calculateSourceExtent","worldWidth","worldsAway","Math","floor","sourceExtents","slice","forEach","extent","sourceRange","getTileRangeForExtentAndZ","srcX","minX","maxX","srcY","minY","maxY","tile","offset","push","getImage","reproject_","sources","source","getState","LOADED","clipExtent","image","ERROR","z","size","getTileSize","width","height","interpolate","changed","load","LOADING","leftToLoad","sourceListenKey","CHANGE","e","unlistenSources_","setTimeout","bind","i","arr","release","getContext"],"sources":["F:/Dev/Tutorial/React/Udemy/react-frontend-01-starting-setup/node_modules/ol/reproj/Tile.js"],"sourcesContent":["/**\n * @module ol/reproj/Tile\n */\n\nimport Tile from '../Tile.js';\nimport TileState from '../TileState.js';\nimport {releaseCanvas} from '../dom.js';\nimport EventType from '../events/EventType.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {getArea, getIntersection, getWidth, wrapAndSliceX} from '../extent.js';\nimport {clamp} from '../math.js';\nimport {\n  calculateSourceExtentResolution,\n  canvasPool,\n  render as renderReprojected,\n} from '../reproj.js';\nimport Triangulation from './Triangulation.js';\nimport {ERROR_THRESHOLD} from './common.js';\n\n/**\n * @typedef {function(number, number, number, number) : (import(\"../ImageTile.js\").default)} FunctionType\n */\n\n/**\n * @typedef {Object} TileOffset\n * @property {import(\"../ImageTile.js\").default} tile Tile.\n * @property {number} offset Offset.\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected tile.\n * See {@link module:ol/source/TileImage~TileImage}.\n *\n */\nclass ReprojTile extends Tile {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} sourceTileGrid Source tile grid.\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} targetTileGrid Target tile grid.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Coordinate of the tile.\n   * @param {import(\"../tilecoord.js\").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} gutter Gutter of the source tiles.\n   * @param {FunctionType} getTileFunction\n   *     Function returning source tiles (z, x, y, pixelRatio).\n   * @param {number} [errorThreshold] Acceptable reprojection error (in px).\n   * @param {boolean} [renderEdges] Render reprojection edges.\n   * @param {import(\"../Tile.js\").Options} [options] Tile options.\n   */\n  constructor(\n    sourceProj,\n    sourceTileGrid,\n    targetProj,\n    targetTileGrid,\n    tileCoord,\n    wrappedTileCoord,\n    pixelRatio,\n    gutter,\n    getTileFunction,\n    errorThreshold,\n    renderEdges,\n    options,\n  ) {\n    super(tileCoord, TileState.IDLE, options);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderEdges_ = renderEdges !== undefined ? renderEdges : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = gutter;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.sourceTileGrid_ = sourceTileGrid;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.targetTileGrid_ = targetTileGrid;\n\n    /**\n     * @private\n     * @type {import(\"../tilecoord.js\").TileCoord}\n     */\n    this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;\n\n    /**\n     * @private\n     * @type {!Array<TileOffset>}\n     */\n    this.sourceTiles_ = [];\n\n    /**\n     * @private\n     * @type {?Array<import(\"../events.js\").EventsKey>}\n     */\n    this.sourcesListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourceZ_ = 0;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.clipExtent_ = sourceProj.canWrapX()\n      ? sourceProj.getExtent()\n      : undefined;\n\n    const targetExtent = targetTileGrid.getTileCoordExtent(\n      this.wrappedTileCoord_,\n    );\n    const maxTargetExtent = this.targetTileGrid_.getExtent();\n    let maxSourceExtent = this.sourceTileGrid_.getExtent();\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    if (getArea(limitedTargetExtent) === 0) {\n      // Tile is completely outside range -> EMPTY\n      // TODO: is it actually correct that the source even creates the tile ?\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    const sourceProjExtent = sourceProj.getExtent();\n    if (sourceProjExtent) {\n      if (!maxSourceExtent) {\n        maxSourceExtent = sourceProjExtent;\n      } else {\n        maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);\n      }\n    }\n\n    const targetResolution = targetTileGrid.getResolution(\n      this.wrappedTileCoord_[0],\n    );\n\n    const sourceResolution = calculateSourceExtentResolution(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      targetResolution,\n    );\n\n    if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n      // invalid sourceResolution -> EMPTY\n      // probably edges of the projections when no extent is defined\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    const errorThresholdInPixels =\n      errorThreshold !== undefined ? errorThreshold : ERROR_THRESHOLD;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution,\n    );\n\n    if (this.triangulation_.getTriangles().length === 0) {\n      // no valid triangles -> EMPTY\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);\n    let sourceExtent = this.triangulation_.calculateSourceExtent();\n\n    if (maxSourceExtent) {\n      if (sourceProj.canWrapX()) {\n        sourceExtent[1] = clamp(\n          sourceExtent[1],\n          maxSourceExtent[1],\n          maxSourceExtent[3],\n        );\n        sourceExtent[3] = clamp(\n          sourceExtent[3],\n          maxSourceExtent[1],\n          maxSourceExtent[3],\n        );\n      } else {\n        sourceExtent = getIntersection(sourceExtent, maxSourceExtent);\n      }\n    }\n\n    if (!getArea(sourceExtent)) {\n      this.state = TileState.EMPTY;\n    } else {\n      let worldWidth = 0;\n      let worldsAway = 0;\n      if (sourceProj.canWrapX()) {\n        worldWidth = getWidth(sourceProjExtent);\n        worldsAway = Math.floor(\n          (sourceExtent[0] - sourceProjExtent[0]) / worldWidth,\n        );\n      }\n\n      const sourceExtents = wrapAndSliceX(\n        sourceExtent.slice(),\n        sourceProj,\n        true,\n      );\n      sourceExtents.forEach((extent) => {\n        const sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(\n          extent,\n          this.sourceZ_,\n        );\n\n        for (let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {\n          for (let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {\n            const tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);\n            if (tile) {\n              const offset = worldsAway * worldWidth;\n              this.sourceTiles_.push({tile, offset});\n            }\n          }\n        }\n        ++worldsAway;\n      });\n\n      if (this.sourceTiles_.length === 0) {\n        this.state = TileState.EMPTY;\n      }\n    }\n  }\n\n  /**\n   * Get the HTML Canvas element for this tile.\n   * @return {HTMLCanvasElement} Canvas.\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sources = [];\n    this.sourceTiles_.forEach((source) => {\n      const tile = source.tile;\n      if (tile && tile.getState() == TileState.LOADED) {\n        const extent = this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord);\n        extent[0] += source.offset;\n        extent[2] += source.offset;\n        const clipExtent = this.clipExtent_?.slice();\n        if (clipExtent) {\n          clipExtent[0] += source.offset;\n          clipExtent[2] += source.offset;\n        }\n        sources.push({\n          extent: extent,\n          clipExtent: clipExtent,\n          image: tile.getImage(),\n        });\n      }\n    });\n    this.sourceTiles_.length = 0;\n\n    if (sources.length === 0) {\n      this.state = TileState.ERROR;\n    } else {\n      const z = this.wrappedTileCoord_[0];\n      const size = this.targetTileGrid_.getTileSize(z);\n      const width = typeof size === 'number' ? size : size[0];\n      const height = typeof size === 'number' ? size : size[1];\n      const targetResolution = this.targetTileGrid_.getResolution(z);\n      const sourceResolution = this.sourceTileGrid_.getResolution(\n        this.sourceZ_,\n      );\n\n      const targetExtent = this.targetTileGrid_.getTileCoordExtent(\n        this.wrappedTileCoord_,\n      );\n\n      this.canvas_ = renderReprojected(\n        width,\n        height,\n        this.pixelRatio_,\n        sourceResolution,\n        this.sourceTileGrid_.getExtent(),\n        targetResolution,\n        targetExtent,\n        this.triangulation_,\n        sources,\n        this.gutter_,\n        this.renderEdges_,\n        this.interpolate,\n      );\n\n      this.state = TileState.LOADED;\n    }\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @override\n   */\n  load() {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      this.changed();\n\n      let leftToLoad = 0;\n\n      this.sourcesListenerKeys_ = [];\n      this.sourceTiles_.forEach(({tile}) => {\n        const state = tile.getState();\n        if (state == TileState.IDLE || state == TileState.LOADING) {\n          leftToLoad++;\n\n          const sourceListenKey = listen(tile, EventType.CHANGE, (e) => {\n            const state = tile.getState();\n            if (\n              state == TileState.LOADED ||\n              state == TileState.ERROR ||\n              state == TileState.EMPTY\n            ) {\n              unlistenByKey(sourceListenKey);\n              leftToLoad--;\n              if (leftToLoad === 0) {\n                this.unlistenSources_();\n                this.reproject_();\n              }\n            }\n          });\n          this.sourcesListenerKeys_.push(sourceListenKey);\n        }\n      });\n\n      if (leftToLoad === 0) {\n        setTimeout(this.reproject_.bind(this), 0);\n      } else {\n        this.sourceTiles_.forEach(function ({tile}, i, arr) {\n          const state = tile.getState();\n          if (state == TileState.IDLE) {\n            tile.load();\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSources_() {\n    this.sourcesListenerKeys_.forEach(unlistenByKey);\n    this.sourcesListenerKeys_ = null;\n  }\n\n  /**\n   * Remove from the cache due to expiry\n   * @override\n   */\n  release() {\n    if (this.canvas_) {\n      releaseCanvas(this.canvas_.getContext('2d'));\n      canvasPool.push(this.canvas_);\n      this.canvas_ = null;\n    }\n    super.release();\n  }\n}\n\nexport default ReprojTile;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}