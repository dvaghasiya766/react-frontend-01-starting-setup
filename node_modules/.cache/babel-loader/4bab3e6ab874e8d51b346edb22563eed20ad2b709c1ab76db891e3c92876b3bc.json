{"ast":null,"code":"/**\n * @module ol/proj/utm\n */\n\n/**\n * Adapted from https://github.com/Turbo87/utm\n * Copyright (c) 2012-2017 Tobias Bieniek\n *\n * The functions here provide approximate transforms to and from UTM.\n * They are not appropriate for use beyond the validity extend of a UTM\n * zone, and the accuracy of the transform decreases toward the zone\n * edges.\n */\n\nimport { toDegrees, toRadians, wrap } from '../math.js';\nimport Projection from './Projection.js';\n\n/**\n * @typedef {Object} UTMZone\n * @property {number} number The zone number (1 - 60).\n * @property {boolean} north The northern hemisphere.\n */\n\nconst K0 = 0.9996;\nconst E = 0.00669438;\nconst E2 = E * E;\nconst E3 = E2 * E;\nconst E_P2 = E / (1 - E);\nconst SQRT_E = Math.sqrt(1 - E);\nconst _E = (1 - SQRT_E) / (1 + SQRT_E);\nconst _E2 = _E * _E;\nconst _E3 = _E2 * _E;\nconst _E4 = _E3 * _E;\nconst _E5 = _E4 * _E;\nconst M1 = 1 - E / 4 - 3 * E2 / 64 - 5 * E3 / 256;\nconst M2 = 3 * E / 8 + 3 * E2 / 32 + 45 * E3 / 1024;\nconst M3 = 15 * E2 / 256 + 45 * E3 / 1024;\nconst M4 = 35 * E3 / 3072;\nconst P2 = 3 / 2 * _E - 27 / 32 * _E3 + 269 / 512 * _E5;\nconst P3 = 21 / 16 * _E2 - 55 / 32 * _E4;\nconst P4 = 151 / 96 * _E3 - 417 / 128 * _E5;\nconst P5 = 1097 / 512 * _E4;\nconst R = 6378137;\n\n/**\n * @param {number} easting Easting value of coordinate.\n * @param {number} northing Northing value of coordinate.\n * @param {UTMZone} zone The UTM zone.\n * @return {import(\"../coordinate.js\").Coordinate} The transformed coordinate.\n */\nfunction toLonLat(easting, northing, zone) {\n  const x = easting - 500000;\n  const y = zone.north ? northing : northing - 10000000;\n  const m = y / K0;\n  const mu = m / (R * M1);\n  const pRad = mu + P2 * Math.sin(2 * mu) + P3 * Math.sin(4 * mu) + P4 * Math.sin(6 * mu) + P5 * Math.sin(8 * mu);\n  const pSin = Math.sin(pRad);\n  const pSin2 = pSin * pSin;\n  const pCos = Math.cos(pRad);\n  const pTan = pSin / pCos;\n  const pTan2 = pTan * pTan;\n  const pTan4 = pTan2 * pTan2;\n  const epSin = 1 - E * pSin2;\n  const epSinSqrt = Math.sqrt(1 - E * pSin2);\n  const n = R / epSinSqrt;\n  const r = (1 - E) / epSin;\n  const c = E_P2 * pCos ** 2;\n  const c2 = c * c;\n  const d = x / (n * K0);\n  const d2 = d * d;\n  const d3 = d2 * d;\n  const d4 = d3 * d;\n  const d5 = d4 * d;\n  const d6 = d5 * d;\n  const latitude = pRad - pTan / r * (d2 / 2 - d4 / 24 * (5 + 3 * pTan2 + 10 * c - 4 * c2 - 9 * E_P2)) + d6 / 720 * (61 + 90 * pTan2 + 298 * c + 45 * pTan4 - 252 * E_P2 - 3 * c2);\n  let longitude = (d - d3 / 6 * (1 + 2 * pTan2 + c) + d5 / 120 * (5 - 2 * c + 28 * pTan2 - 3 * c2 + 8 * E_P2 + 24 * pTan4)) / pCos;\n  longitude = wrap(longitude + toRadians(zoneToCentralLongitude(zone.number)), -Math.PI, Math.PI);\n  return [toDegrees(longitude), toDegrees(latitude)];\n}\nconst MIN_LATITUDE = -80;\nconst MAX_LATITUDE = 84;\nconst MIN_LONGITUDE = -180;\nconst MAX_LONGITUDE = 180;\n\n/**\n * @param {number} longitude The longitude.\n * @param {number} latitude The latitude.\n * @param {UTMZone} zone The UTM zone.\n * @return {import('../coordinate.js').Coordinate} The UTM coordinate.\n */\nfunction fromLonLat(longitude, latitude, zone) {\n  longitude = wrap(longitude, MIN_LONGITUDE, MAX_LONGITUDE);\n  if (latitude < MIN_LATITUDE) {\n    latitude = MIN_LATITUDE;\n  } else if (latitude > MAX_LATITUDE) {\n    latitude = MAX_LATITUDE;\n  }\n  const latRad = toRadians(latitude);\n  const latSin = Math.sin(latRad);\n  const latCos = Math.cos(latRad);\n  const latTan = latSin / latCos;\n  const latTan2 = latTan * latTan;\n  const latTan4 = latTan2 * latTan2;\n  const lonRad = toRadians(longitude);\n  const centralLon = zoneToCentralLongitude(zone.number);\n  const centralLonRad = toRadians(centralLon);\n  const n = R / Math.sqrt(1 - E * latSin ** 2);\n  const c = E_P2 * latCos ** 2;\n  const a = latCos * wrap(lonRad - centralLonRad, -Math.PI, Math.PI);\n  const a2 = a * a;\n  const a3 = a2 * a;\n  const a4 = a3 * a;\n  const a5 = a4 * a;\n  const a6 = a5 * a;\n  const m = R * (M1 * latRad - M2 * Math.sin(2 * latRad) + M3 * Math.sin(4 * latRad) - M4 * Math.sin(6 * latRad));\n  const easting = K0 * n * (a + a3 / 6 * (1 - latTan2 + c) + a5 / 120 * (5 - 18 * latTan2 + latTan4 + 72 * c - 58 * E_P2)) + 500000;\n  let northing = K0 * (m + n * latTan * (a2 / 2 + a4 / 24 * (5 - latTan2 + 9 * c + 4 * c ** 2) + a6 / 720 * (61 - 58 * latTan2 + latTan4 + 600 * c - 330 * E_P2)));\n  if (!zone.north) {\n    northing += 10000000;\n  }\n  return [easting, northing];\n}\n\n/**\n * @param {number} zone The zone number.\n * @return {number} The central longitude in degrees.\n */\nfunction zoneToCentralLongitude(zone) {\n  return (zone - 1) * 6 - 180 + 3;\n}\n\n/**\n * @type {Array<RegExp>}\n */\nconst epsgRegExes = [/^EPSG:(\\d+)$/, /^urn:ogc:def:crs:EPSG::(\\d+)$/, /^http:\\/\\/www\\.opengis\\.net\\/def\\/crs\\/EPSG\\/0\\/(\\d+)$/];\n\n/**\n * @param {string} code The projection code.\n * @return {UTMZone|null} The UTM zone info (or null if not UTM).\n */\nexport function zoneFromCode(code) {\n  let epsgId = 0;\n  for (const re of epsgRegExes) {\n    const match = code.match(re);\n    if (match) {\n      epsgId = parseInt(match[1]);\n      break;\n    }\n  }\n  if (!epsgId) {\n    return null;\n  }\n  let number = 0;\n  let north = false;\n  if (epsgId > 32700 && epsgId < 32761) {\n    number = epsgId - 32700;\n  } else if (epsgId > 32600 && epsgId < 32661) {\n    north = true;\n    number = epsgId - 32600;\n  }\n  if (!number) {\n    return null;\n  }\n  return {\n    number,\n    north\n  };\n}\n\n/**\n * @param {function(number, number, UTMZone): import('../coordinate.js').Coordinate} transformer The transformer.\n * @param {UTMZone} zone The UTM zone.\n * @return {import('../proj.js').TransformFunction} The transform function.\n */\nfunction makeTransformFunction(transformer, zone) {\n  return function (input, output, dimension, stride) {\n    const length = input.length;\n    dimension = dimension > 1 ? dimension : 2;\n    stride = stride ?? dimension;\n    if (!output) {\n      if (dimension > 2) {\n        output = input.slice();\n      } else {\n        output = new Array(length);\n      }\n    }\n    for (let i = 0; i < length; i += stride) {\n      const x = input[i];\n      const y = input[i + 1];\n      const coord = transformer(x, y, zone);\n      output[i] = coord[0];\n      output[i + 1] = coord[1];\n    }\n    return output;\n  };\n}\n\n/**\n * @param {string} code The projection code.\n * @return {import('./Projection.js').default|null} A projection or null if unable to create one.\n */\nexport function makeProjection(code) {\n  const zone = zoneFromCode(code);\n  if (!zone) {\n    return null;\n  }\n  return new Projection({\n    code,\n    units: 'm'\n  });\n}\n\n/**\n * @param {import('./Projection.js').default} projection The projection.\n * @return {import('../proj.js').Transforms|null} The transforms lookup or null if unable to handle projection.\n */\nexport function makeTransforms(projection) {\n  const zone = zoneFromCode(projection.getCode());\n  if (!zone) {\n    return null;\n  }\n  return {\n    forward: makeTransformFunction(fromLonLat, zone),\n    inverse: makeTransformFunction(toLonLat, zone)\n  };\n}","map":{"version":3,"names":["toDegrees","toRadians","wrap","Projection","K0","E","E2","E3","E_P2","SQRT_E","Math","sqrt","_E","_E2","_E3","_E4","_E5","M1","M2","M3","M4","P2","P3","P4","P5","R","toLonLat","easting","northing","zone","x","y","north","m","mu","pRad","sin","pSin","pSin2","pCos","cos","pTan","pTan2","pTan4","epSin","epSinSqrt","n","r","c","c2","d","d2","d3","d4","d5","d6","latitude","longitude","zoneToCentralLongitude","number","PI","MIN_LATITUDE","MAX_LATITUDE","MIN_LONGITUDE","MAX_LONGITUDE","fromLonLat","latRad","latSin","latCos","latTan","latTan2","latTan4","lonRad","centralLon","centralLonRad","a","a2","a3","a4","a5","a6","epsgRegExes","zoneFromCode","code","epsgId","re","match","parseInt","makeTransformFunction","transformer","input","output","dimension","stride","length","slice","Array","i","coord","makeProjection","units","makeTransforms","projection","getCode","forward","inverse"],"sources":["F:/Dev/Tutorial/React/Udemy/react-frontend-01-starting-setup/node_modules/ol/proj/utm.js"],"sourcesContent":["/**\n * @module ol/proj/utm\n */\n\n/**\n * Adapted from https://github.com/Turbo87/utm\n * Copyright (c) 2012-2017 Tobias Bieniek\n *\n * The functions here provide approximate transforms to and from UTM.\n * They are not appropriate for use beyond the validity extend of a UTM\n * zone, and the accuracy of the transform decreases toward the zone\n * edges.\n */\n\nimport {toDegrees, toRadians, wrap} from '../math.js';\nimport Projection from './Projection.js';\n\n/**\n * @typedef {Object} UTMZone\n * @property {number} number The zone number (1 - 60).\n * @property {boolean} north The northern hemisphere.\n */\n\nconst K0 = 0.9996;\n\nconst E = 0.00669438;\nconst E2 = E * E;\nconst E3 = E2 * E;\nconst E_P2 = E / (1 - E);\n\nconst SQRT_E = Math.sqrt(1 - E);\nconst _E = (1 - SQRT_E) / (1 + SQRT_E);\nconst _E2 = _E * _E;\nconst _E3 = _E2 * _E;\nconst _E4 = _E3 * _E;\nconst _E5 = _E4 * _E;\n\nconst M1 = 1 - E / 4 - (3 * E2) / 64 - (5 * E3) / 256;\nconst M2 = (3 * E) / 8 + (3 * E2) / 32 + (45 * E3) / 1024;\nconst M3 = (15 * E2) / 256 + (45 * E3) / 1024;\nconst M4 = (35 * E3) / 3072;\n\nconst P2 = (3 / 2) * _E - (27 / 32) * _E3 + (269 / 512) * _E5;\nconst P3 = (21 / 16) * _E2 - (55 / 32) * _E4;\nconst P4 = (151 / 96) * _E3 - (417 / 128) * _E5;\nconst P5 = (1097 / 512) * _E4;\n\nconst R = 6378137;\n\n/**\n * @param {number} easting Easting value of coordinate.\n * @param {number} northing Northing value of coordinate.\n * @param {UTMZone} zone The UTM zone.\n * @return {import(\"../coordinate.js\").Coordinate} The transformed coordinate.\n */\nfunction toLonLat(easting, northing, zone) {\n  const x = easting - 500000;\n  const y = zone.north ? northing : northing - 10000000;\n\n  const m = y / K0;\n  const mu = m / (R * M1);\n\n  const pRad =\n    mu +\n    P2 * Math.sin(2 * mu) +\n    P3 * Math.sin(4 * mu) +\n    P4 * Math.sin(6 * mu) +\n    P5 * Math.sin(8 * mu);\n\n  const pSin = Math.sin(pRad);\n  const pSin2 = pSin * pSin;\n\n  const pCos = Math.cos(pRad);\n\n  const pTan = pSin / pCos;\n  const pTan2 = pTan * pTan;\n  const pTan4 = pTan2 * pTan2;\n\n  const epSin = 1 - E * pSin2;\n  const epSinSqrt = Math.sqrt(1 - E * pSin2);\n\n  const n = R / epSinSqrt;\n  const r = (1 - E) / epSin;\n\n  const c = E_P2 * pCos ** 2;\n  const c2 = c * c;\n\n  const d = x / (n * K0);\n  const d2 = d * d;\n  const d3 = d2 * d;\n  const d4 = d3 * d;\n  const d5 = d4 * d;\n  const d6 = d5 * d;\n\n  const latitude =\n    pRad -\n    (pTan / r) *\n      (d2 / 2 - (d4 / 24) * (5 + 3 * pTan2 + 10 * c - 4 * c2 - 9 * E_P2)) +\n    (d6 / 720) * (61 + 90 * pTan2 + 298 * c + 45 * pTan4 - 252 * E_P2 - 3 * c2);\n\n  let longitude =\n    (d -\n      (d3 / 6) * (1 + 2 * pTan2 + c) +\n      (d5 / 120) * (5 - 2 * c + 28 * pTan2 - 3 * c2 + 8 * E_P2 + 24 * pTan4)) /\n    pCos;\n\n  longitude = wrap(\n    longitude + toRadians(zoneToCentralLongitude(zone.number)),\n    -Math.PI,\n    Math.PI,\n  );\n\n  return [toDegrees(longitude), toDegrees(latitude)];\n}\n\nconst MIN_LATITUDE = -80;\nconst MAX_LATITUDE = 84;\nconst MIN_LONGITUDE = -180;\nconst MAX_LONGITUDE = 180;\n\n/**\n * @param {number} longitude The longitude.\n * @param {number} latitude The latitude.\n * @param {UTMZone} zone The UTM zone.\n * @return {import('../coordinate.js').Coordinate} The UTM coordinate.\n */\nfunction fromLonLat(longitude, latitude, zone) {\n  longitude = wrap(longitude, MIN_LONGITUDE, MAX_LONGITUDE);\n\n  if (latitude < MIN_LATITUDE) {\n    latitude = MIN_LATITUDE;\n  } else if (latitude > MAX_LATITUDE) {\n    latitude = MAX_LATITUDE;\n  }\n\n  const latRad = toRadians(latitude);\n  const latSin = Math.sin(latRad);\n  const latCos = Math.cos(latRad);\n\n  const latTan = latSin / latCos;\n  const latTan2 = latTan * latTan;\n  const latTan4 = latTan2 * latTan2;\n\n  const lonRad = toRadians(longitude);\n  const centralLon = zoneToCentralLongitude(zone.number);\n  const centralLonRad = toRadians(centralLon);\n\n  const n = R / Math.sqrt(1 - E * latSin ** 2);\n  const c = E_P2 * latCos ** 2;\n\n  const a = latCos * wrap(lonRad - centralLonRad, -Math.PI, Math.PI);\n  const a2 = a * a;\n  const a3 = a2 * a;\n  const a4 = a3 * a;\n  const a5 = a4 * a;\n  const a6 = a5 * a;\n\n  const m =\n    R *\n    (M1 * latRad -\n      M2 * Math.sin(2 * latRad) +\n      M3 * Math.sin(4 * latRad) -\n      M4 * Math.sin(6 * latRad));\n\n  const easting =\n    K0 *\n      n *\n      (a +\n        (a3 / 6) * (1 - latTan2 + c) +\n        (a5 / 120) * (5 - 18 * latTan2 + latTan4 + 72 * c - 58 * E_P2)) +\n    500000;\n\n  let northing =\n    K0 *\n    (m +\n      n *\n        latTan *\n        (a2 / 2 +\n          (a4 / 24) * (5 - latTan2 + 9 * c + 4 * c ** 2) +\n          (a6 / 720) * (61 - 58 * latTan2 + latTan4 + 600 * c - 330 * E_P2)));\n\n  if (!zone.north) {\n    northing += 10000000;\n  }\n\n  return [easting, northing];\n}\n\n/**\n * @param {number} zone The zone number.\n * @return {number} The central longitude in degrees.\n */\nfunction zoneToCentralLongitude(zone) {\n  return (zone - 1) * 6 - 180 + 3;\n}\n\n/**\n * @type {Array<RegExp>}\n */\nconst epsgRegExes = [\n  /^EPSG:(\\d+)$/,\n  /^urn:ogc:def:crs:EPSG::(\\d+)$/,\n  /^http:\\/\\/www\\.opengis\\.net\\/def\\/crs\\/EPSG\\/0\\/(\\d+)$/,\n];\n\n/**\n * @param {string} code The projection code.\n * @return {UTMZone|null} The UTM zone info (or null if not UTM).\n */\nexport function zoneFromCode(code) {\n  let epsgId = 0;\n  for (const re of epsgRegExes) {\n    const match = code.match(re);\n    if (match) {\n      epsgId = parseInt(match[1]);\n      break;\n    }\n  }\n  if (!epsgId) {\n    return null;\n  }\n\n  let number = 0;\n  let north = false;\n  if (epsgId > 32700 && epsgId < 32761) {\n    number = epsgId - 32700;\n  } else if (epsgId > 32600 && epsgId < 32661) {\n    north = true;\n    number = epsgId - 32600;\n  }\n  if (!number) {\n    return null;\n  }\n\n  return {number, north};\n}\n\n/**\n * @param {function(number, number, UTMZone): import('../coordinate.js').Coordinate} transformer The transformer.\n * @param {UTMZone} zone The UTM zone.\n * @return {import('../proj.js').TransformFunction} The transform function.\n */\nfunction makeTransformFunction(transformer, zone) {\n  return function (input, output, dimension, stride) {\n    const length = input.length;\n    dimension = dimension > 1 ? dimension : 2;\n    stride = stride ?? dimension;\n    if (!output) {\n      if (dimension > 2) {\n        output = input.slice();\n      } else {\n        output = new Array(length);\n      }\n    }\n    for (let i = 0; i < length; i += stride) {\n      const x = input[i];\n      const y = input[i + 1];\n      const coord = transformer(x, y, zone);\n      output[i] = coord[0];\n      output[i + 1] = coord[1];\n    }\n    return output;\n  };\n}\n\n/**\n * @param {string} code The projection code.\n * @return {import('./Projection.js').default|null} A projection or null if unable to create one.\n */\nexport function makeProjection(code) {\n  const zone = zoneFromCode(code);\n  if (!zone) {\n    return null;\n  }\n  return new Projection({code, units: 'm'});\n}\n\n/**\n * @param {import('./Projection.js').default} projection The projection.\n * @return {import('../proj.js').Transforms|null} The transforms lookup or null if unable to handle projection.\n */\nexport function makeTransforms(projection) {\n  const zone = zoneFromCode(projection.getCode());\n  if (!zone) {\n    return null;\n  }\n\n  return {\n    forward: makeTransformFunction(fromLonLat, zone),\n    inverse: makeTransformFunction(toLonLat, zone),\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}